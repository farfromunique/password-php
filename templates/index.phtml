<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>ACWPD Random Password Generator</title>
        <link href="https://fonts.googleapis.com/css?family=Josefin+Slab:600|PT+Mono|Source+Sans+Pro" rel="stylesheet">
		<link href="/css/bootstrap.min.css" rel="stylesheet">
		<link href="/css/custom.css" rel="stylesheet">
		<script>
			/*(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
			})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

			ga('create', 'UA-48537533-4', 'auto');
			ga('send', 'pageview');*/
		</script>
	</head>
    <body>
        <div class="container">
			<div class="row">
				<div class="col-md-12">
					<div class="page-header">
						<h1 id="header" class="text-center">ACWPD Random Password Generator</h1>
					</div>
					<p>
						This tool will generate a password for you using <a href="https://www.random.org/">Random.Org's</a> true random numbers. While the password is not guarenteed to be unique, there is a high probability that it is. It's also not something that can be guessed, as it's random.
					</p>
					<p>
						These passwords are not designed to be memorized; they're designed for use with password managers, such as those built in to modern browsers, or standalone products. Because of this, they have a lot of characters in them, many of which are "special". We're working on a way to ensure that each password includes 1 capital, 1 lower-case, 1 number, and 1 special character; until we have that feature in place, please just generate a new password if the one(s) you generated didn't meet your requirements.
					</p>
				</div>
			</div>
			<div class="row">
				<div class="col-md-4">
					<form role="form">
						<div class="form-group">
							<label for="password-length ">
								Number of characters in password
							</label>
							<input type="number" class="form-control" name="password-length" id="password-length" value="15" />
						</div>
						<div class="form-group">
							<label for="password-count">
								Number of passwords to generate
							</label>
							<input type="number" class="form-control" name="password-count" id="password-count" value="2" />
						</div>
						<div class="form-group">
							<label for="character-range">
								Choose the list your password will come from
							</label>
							<input type="text" class="form-control" name="character-range" id="character-range" value="33:126" />
							<input type="hidden" name="min" id="min-character" value="33" />
							<input type="hidden" name="max" id="max-character" value="126" />
						</div>
						<div class="form-group">
							<label for="character-range">
								Type the characters you want to exclude
							</label>
							<input type="text" class="form-control" name="exclude" id="exclude" value="1i|Il0oO`'.,_-;:" />
						</div>
						<a class="btn btn-primary btn-lg btn-block" ic-post-to="/a/password" ic-target="#passwords">
							Get passwords!
						</a>
					</form>
				</div>
				<div class="col-md-4">
					<p>
						Your password will include only characters from this list:
					</p>
					<ul class="list-inline" id="all-characters">
						
					</ul>
					
				</div>
				<div class="col-md-4" id="passwords">
					
				</div>
			</div>

		</div>
		<div class="hidden" id="scripts">
			<script	src="/js/jquery-3.2.1.min.js"></script>
			<script src="/js/bootstrap.min.js"></script>
			<script	src="/js/intercooler-1.1.2.min.js"></script>
			<script>

				function addCharToList(char) {
					var ul = document.querySelector('#all-characters');
					var liToAdd = document.createElement('li');
					liToAdd.innerText = char;
					ul.appendChild(liToAdd);
				}
				function removeExcludedChars() {
					let exclude = document.querySelector('#exclude').value;
					let ex = exclude.split('');
					ex.forEach(
						function(char){
							for (let i = 0; i < all.childElementCount; i++) {
								if (all.childNodes[i].innerText == char) {
									all.childNodes[i].remove();
								}
							}
						}
					);
				}
				function makeList() {
					let symbols = document.querySelectorAll('#all-characters > li');
					symbols.forEach(function(el) {
						el.remove();
					}, this);
					let range = document.querySelector('#character-range').value;
					let min = range.substr(0,range.indexOf(':'))-0;
					let max = range.substr(range.indexOf(':')+1)-0;
					
					for (let i = min; i < max; i++) {
						addCharToList(String.fromCharCode(i));
					}
				}

				$('#exclude').keyup(function(){
					makeList()
					let all = document.querySelector('#all-characters');
					let exclude = document.querySelector('#exclude').value;
					let ex = exclude.split('');
					ex.forEach(
						function(char){
							for (let i = 0; i < all.childElementCount; i++) {
								if (all.childNodes[i].innerText == char) {
									all.childNodes[i].remove();
								}
							}
						}
					);
				});

				document.addEventListener('load',makeList());
				
				document.querySelector('form').addEventListener('submit',
					function mySubmitFunction(evt) {
						evt.preventDefault();
						return false;
				});

			</script>
		</div>
    </body>
</html>
